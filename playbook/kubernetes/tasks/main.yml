# Master と Workerで共通のタスク
#- debug: msg="{{ ansible_facts }}"
- debug: msg="Kubernetes version = {{ kubernetes_version }}"

- include_tasks: tasks/test.yml

##################################################
##  Linux Distributionの設定
##################################################
## セキュリティ
- name: Change selinux
  selinux:
    policy: targeted
    state: permissive
  when:
    - ansible_facts.distribution == "CentOS"
## ファイアウオールの停止
- name: Stop firewalld
  systemd:
    name: firewalld
    state: stopped
    enabled: no
  when:
    - ansible_facts.distribution == "CentOS"
- name: Disable Swap area and delete
  shell: |
    swapoff /dev/dm-1
    systemctl daemon-reload
  when:
    - ansible_facts.distribution == "CentOS"


## 共通設定 カーネル設定変更
- name: Add the br_netfilter module
  modprobe:
    name: br_netfilter
    state: present
  #when:
    #- ansible_facts.distribution == "Ubuntu"
    #- container_engine == "containerd"
- name: Add the overlay
  modprobe:
    name:  overlay
    state: present
  #when:
    #- ansible_facts.distribution == "Ubuntu"
    #- container_engine == "containerd"

- name: Set sysctl bridge
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: "1"
    sysctl_set: yes
    sysctl_file: /etc/sysctl.conf      
    state: present
    reload: yes
- name: Set sysctl ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    sysctl_set: yes
    sysctl_file: /etc/sysctl.conf      
    state: present
    reload: yes

##################################################
##  Docker CE のインストール
##################################################

- name: Add Docker GPG key
  apt_key: url=https://download.docker.com/linux/ubuntu/gpg
  when:
    - ansible_facts.distribution == "Ubuntu"
    - container_engine == "docker-ce"
- name: Add Docker APT repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable
  when:
    - ansible_facts.distribution == "Ubuntu"
    - container_engine == "docker-ce"    

- name: Install a list of packages 1
  apt:
    name: "{{ packages }}"
    state: present
    #update_cache: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common
    - nfs-common
    - docker-ce{{ docker_version_ubuntu }}
  when:
    - ansible_facts.distribution == "Ubuntu"
    - container_engine == "docker-ce"
################################################## CentOS
- name: ensure a list of packages uninstalled
  yum:
    name: "{{ packages }}"
    state: absent
  vars:
    packages:
    - docker
    - docker-client
    - docker-client-latest
    - docker-common
    - docker-latest
    - docker-latest-logrotate
    - docker-logrotate
    - docker-engine
  when:
    - ansible_facts.distribution == "CentOS"
    #- container_engine == "docker-ce" # docker-ce & containerd で共通
    
- name: Add Docker repository
  shell: "yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo"
  args:
    chdir: "/etc/yum.repos.d"
    creates: docker-ce.repo
  when:
    - ansible_facts.distribution == "CentOS"
    #- container_engine == "docker-ce"    
- name: ensure a list of packages installed
  yum:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    - docker-ce-{{ docker_version_centos }}
    - containerd.io
    - git
  when:
    - ansible_facts.distribution == "CentOS"
    - container_engine == "docker-ce"    
################################################### Ubuntu & CentOS    
- name: Add the user 'vagrant' with a specific uid and a primary group of 'docker'
  user:
    name: vagrant
    comment: docker exection user
    group: docker
  when:
    - container_engine == "docker-ce"    
- name: Start dockerd
  systemd:
    name: docker
    state: started
    enabled: yes
  when:
    - container_engine == "docker-ce"    


###################################################
##  Containerd のインストール
###################################################

- name: setup containerd.conf
  template:
    src: containerd.conf
    dest: /etc/modules-load.d/containerd.conf
    owner: root
    group: root
    mode: '0644'
  when:
    - ansible_facts.distribution == "Ubuntu"
    - container_engine == "containerd"
    
- name: Install the prerequisite packeage 2
  apt:
    name: "{{ packages }}"
    state: present
    #update_cache: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common
    - nfs-common
    - libseccomp2
  when:
    - ansible_facts.distribution == "Ubuntu"
    - container_engine == "containerd"

- name: Deploy Containerd
  unarchive:
    src: /mnt/download/cri-containerd-{{ containerd_version }}.linux-amd64.tar.gz
    dest: /
  when:
    #- ansible_facts.distribution == "Ubuntu"
    - container_engine == "containerd"

- name: mkdir for nfs exports
  file:
    path:  /etc/containerd
    state: directory
    owner: root
    group: root
    mode: '0755'
  when:
    #- ansible_facts.distribution == "Ubuntu"
    - container_engine == "containerd"

- name: create containerd config
  shell: containerd config default > /etc/containerd/config.toml
  when:
    #- ansible_facts.distribution == "Ubuntu"
    - container_engine == "containerd"


################################################### CentOS
- name: ensure a list of packages installed
  yum:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    #- containerd.io
    - git
  when:
    - ansible_facts.distribution == "CentOS"
    - container_engine == "containerd"

##-------------------------------------------
- name: Containerd start by systemd
  systemd:
    state: started
    daemon_reload: yes
    name: containerd
  when: container_engine == "containerd"


###################################################
## GlusterFS のインストール
################################################### Ubuntu
- name: Add GlusterFS Repository
  apt_repository:
    repo: ppa:gluster/glusterfs-7
  when:
    - ansible_facts.distribution == "Ubuntu"
- name: Install GlusterFS client
  apt:
    name: glusterfs-client
    state: present
    #update_cache: yes
  when:
    - ansible_facts.distribution == "Ubuntu"
## カーネル設定変更 
- name: Set sysctl 
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: "1"
    sysctl_set: yes
    sysctl_file: /etc/sysctl.conf      
    state: present
    reload: yes
  when:
    - ansible_facts.distribution == "Ubuntu"
- name: modprobe br_netfilter
  command: modprobe br_netfilter
  when:
    - ansible_facts.distribution == "CentOS"
- sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  when:
    - ansible_facts.distribution == "CentOS"




###################################################  
## Kubernetes のインストール

################################################### Ubuntu
- name: add Kubernetes apt-key [ubuntu]
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  when:
    - ansible_facts.distribution == "Ubuntu"
- name: add Kubernetes' APT repository [ubuntu]
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: 'kubernetes'
  when:
    - ansible_facts.distribution == "Ubuntu"
- name: Install kubectl [ubuntu]
  apt:
    name: kubectl{{ k8s_version_ubuntu }}
    state: present
  when:
    - ansible_facts.distribution == "Ubuntu"
- name: Install kubelet [ubuntu]
  apt:
    name: kubelet{{ k8s_version_ubuntu }}
    state: present
  when:
    - ansible_facts.distribution == "Ubuntu"
- name: Install kubeadm [ubuntu]
  apt:
    name: kubeadm{{ k8s_version_ubuntu }}
    state: present
  when:
    - ansible_facts.distribution == "Ubuntu"

################################################### CentOS
- name: check exisiting /etc/yum.repos.d/kubernetes.repo
  stat:
    path: "/etc/yum.repos.d/kubernetes.repo"
  register: kubernetes_repo
- name: install kubernetes.repo
  template:
    src: kubernetes.repo
    dest: /etc/yum.repos.d/kubernetes.repo
  when:
    - ansible_facts.distribution == "CentOS"
    - kubernetes_repo.stat.exists == false
- name: install kubelet kubeadm kubectl
  yum:
    name: "{{ packages }}"
    state: present
    disable_excludes: kubernetes
  vars:
    packages:
    - kubelet-{{ k8s_version_centos }}
    - kubeadm-{{ k8s_version_centos }}
    - kubectl-{{ k8s_version_centos }}
  when:
    - ansible_facts.distribution == "CentOS"
- name: enable kubelet
  systemd:
    name: kubelet
    state: started
    enabled: yes

###################################################  
## Kubernetes の設定

################################################### Ubuntu & CentOS

## Kubelet の起動パラメータを変更
- name: change 10-kubeadm.conf for v1.11 or later for Ubuntu
  replace:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: 'KUBELET_EXTRA_ARGS$'
    replace: KUBELET_EXTRA_ARGS --node-ip={{ ansible_facts.enp0s8.ipv4.address }} --cluster-dns=10.32.0.10
  when:
    - ansible_facts.distribution == "Ubuntu"
- name: change kubelet.service for CentOS
  replace:
    dest: /etc/systemd/system/multi-user.target.wants/kubelet.service 
    regexp: 'ExecStart=/usr/bin/kubelet'
    replace: ExecStart=/usr/bin/kubelet --node-ip={{ ansible_facts.eth1.ipv4.address }} --cluster-dns=10.32.0.10
  when:
    - ansible_facts.distribution == "CentOS"

## 変更を反映
- name: daemon-reload and restart kubelet
  systemd:
    state: restarted
    daemon_reload: yes
    name: kubelet

