## k8sマスタを初期化
#
- name: "kubeadm reset v1.11 or later"
  command: kubeadm reset -f



## クラスタ参加用のコマンドを作成 Ubuntu

- name: copy from home to local
  copy:
    src: "/vagrant/k8s-config/kubeadm-config.tmp"
    dest: "/tmp/kubeadm-config.yaml"

- name: change IP address & hostname
  replace:
    dest: "/tmp/kubeadm-config.yaml"
    regexp: '__NODE_IP_ADDR__'
    replace: "{{ ansible_facts.enp0s8.ipv4.address }}"
- replace:
    dest: "/tmp/kubeadm-config.yaml"
    regexp: '__NODE_HOSTNAME__'
    replace: "{{ ansible_facts.hostname }}"
- replace:
    dest: "/tmp/kubeadm-config.yaml"
    regexp: '__LB_IP_ADDR__'
    replace: "172.16.2.21"


- command: kubeadm init --config=/tmp/kubeadm-config.yaml
  register: join_ubuntu
  args:
    chdir: /home/vagrant
  when:
    - ansible_facts.distribution == "Ubuntu"



## Join用トークンを書き出す
#- debug: msg="{{ join_ubuntu }}"
- debug: msg="test ===== {{ join_ubuntu.stdout_lines[-2].split('--token')[1].split(' ')[1] }}"
- debug: msg="test ===== {{ join_ubuntu.stdout_lines[-1].split('--discovery-token-ca-cert-hash')[1].split(' ')[1] }}"

- name: Write discovery-token-ca-cert-hash and tls toke for other master nodes
  shell: echo "token" ":" "{{ join_ubuntu.stdout_lines[-2].split('--token')[1].split(' ')[1] }}"  > /vagrant/k8s-config/token.yaml
- shell: echo "discovery_token_ca_cert_hash" ":" {{ join_ubuntu.stdout_lines[-1].split('--discovery-token-ca-cert-hash')[1].split(' ')[1] }}  > /vagrant/k8s-config/discovery-token-ca-cert-hash.yaml


## k8sノード用コマンドを保存（マスターノード用）Ubuntu
#- name: create kubeadm join command for control plane
#  shell: echo "ctrl_join_command" ":" "{{ join_ubuntu.stdout_lines[-2] }} {{ join_ubuntu.stdout_lines[-1] }} --config=/tmp/kubeadm-config.yaml"  > /vagrant/k8s-config/kubeadm-join-master.tmp
#  when:
#    - ansible_facts.distribution == "Ubuntu"

## k8sノード用コマンドを保存（ワーカーノード用）Ubuntu
- name: create kubeadm join command
  shell: echo "join_command" ":" {{ join_ubuntu.stdout_lines[-2] }} {{ join_ubuntu.stdout_lines[-1] }} > /vagrant/k8s-config/kubeadm-join.tmp
  when:
    - ansible_facts.distribution == "Ubuntu"


## クラスタ参加用のコマンドを作成 CentOS
# インタフェース名が Ubuntu と CentOSで異なるために個別に必要、改良の余地あり
- name: kubeadm init for CentOS
  command: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_facts.eth1.ipv4.address }} --service-cidr=10.32.0.0/24
  register: join_centos
  when:
    - ansible_facts.distribution == "CentOS"
## k8sノード用コマンドを保存 CentOS
- name: create kubeadm join command
  shell: echo "join_command" ":" {{ join_centos.stdout_lines[-2] }} {{ join_centos.stdout_lines[-1] }} > /vagrant/kubeadm-join.yaml
  when:
    - ansible_facts.distribution == "CentOS"


## Kubernetesの証明書をコピー
##
- name: copy kubernetes pki files to vagrant host
  shell: |
    cp /etc/kubernetes/pki/ca.crt /vagrant/k8s-pki
    cp /etc/kubernetes/pki/ca.key /vagrant/k8s-pki
    cp /etc/kubernetes/pki/sa.key /vagrant/k8s-pki
    cp /etc/kubernetes/pki/sa.pub /vagrant/k8s-pki
    cp /etc/kubernetes/pki/front-proxy-ca.crt /vagrant/k8s-pki
    cp /etc/kubernetes/pki/front-proxy-ca.key /vagrant/k8s-pki
    cp /etc/kubernetes/pki/etcd/ca.crt /vagrant/k8s-pki/etcd-ca.crt
    cp /etc/kubernetes/pki/etcd/ca.key /vagrant/k8s-pki/etcd-ca.key
    cp /etc/kubernetes/pki/etcd/server.crt /vagrant/k8s-pki/etcd.crt
    cp /etc/kubernetes/pki/etcd/server.key /vagrant/k8s-pki/etcd.key
    cp /etc/kubernetes/admin.conf /vagrant/k8s-pki


## kubeletのDNSのIPアドレスを変更
#
- name: change config.yaml
  replace:
    dest: /var/lib/kubelet/config.yaml
    regexp: '10.96.0.10'
    replace: 10.32.0.10

## kubeletをリスタートして変更を反映
#
- name: daemon-reload and restart kubelet
  systemd:
    state: restarted
    daemon_reload: yes
    name: kubelet
    
## kubeconfigディレクトリ作成
#
- name: mkdir kubeconfig
  file:
    path:  /home/vagrant/.kube
    state: directory
    owner: vagrant
    group: vagrant
    mode:  '0755'

- name: mkdir /vagrant/kubeconfig
  file:
    path:  /vagrant/kubeconfig
    state: directory
    owner: vagrant
    group: vagrant
    mode:  '0755'

##  configファイルのコピー
#
#- name: chmod admin.conf
#  file:
#    path:  /etc/kubernetes/admin.conf
#    owner: vagrant
#    group: vagrant
#    mode:  '0600'
    
- name: copy config to home dir
  copy:
    src:  /etc/kubernetes/admin.conf
    dest: /home/vagrant/.kube/config
    remote_src: yes
    owner: vagrant
    group: vagrant
    mode:  '0600'

## flannelのコピー
#
- set_fact:
    interface: enp0s8
  when:
    - ansible_facts.distribution == "Ubuntu"
- set_fact:
    interface: eth1
  when:
    - ansible_facts.distribution == "CentOS"

- name: copy a manifest of Flannel for k8s ver > 11
  template:
    src:  kube-flannel.yml.j2
    dest: /home/vagrant/kube-flannel.yml
    mode: 0644
    owner: vagrant
    group: vagrant

## Flannelのデプロイ
#
#- name: Deploy Flannel
#  shell: |
#    kubectl apply -f kube-flannel.yml > /home/vagrant/kubectl_apply_flannel.log
#  args:
#    chdir: /home/vagrant
#  become_user: vagrant

#- name: sleep for 20 seconds and continue with play
#  wait_for:
#    timeout: 20

- name: Apply manifest for Flannel
  k8s:
    state: present
    src: /home/vagrant/kube-flannel.yml
    apply: yes
    kubeconfig: /etc/kubernetes/admin.conf

#  args:
#    chdir: /home/vagrant
#  become_user: vagrant



